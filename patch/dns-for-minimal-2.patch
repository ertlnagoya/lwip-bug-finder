diff --git a/ports/unix/minimal/Makefile b/ports/unix/minimal/Makefile
index 7385fb1..302a410 100644
--- a/ports/unix/minimal/Makefile
+++ b/ports/unix/minimal/Makefile
@@ -46,3 +46,6 @@ include .depend
 
 echop: .depend $(LWIPLIBCOMMON) $(APPLIB) main.o $(APPFILES)
 	$(CC) $(CFLAGS) -o echop main.o -Wl,--start-group $(APPLIB) $(LWIPLIBCOMMON) -Wl,--end-group $(LDFLAGS)
+CFLAGS += -Wno-error=discarded-qualifiers
+CFLAGS += -Wno-error=incompatible-pointer-types
+CFLAGS += -Wno-error=unused-function
diff --git a/ports/unix/minimal/lwipopts.h b/ports/unix/minimal/lwipopts.h
index 3388839..45be1ec 100644
--- a/ports/unix/minimal/lwipopts.h
+++ b/ports/unix/minimal/lwipopts.h
@@ -315,7 +315,7 @@
  * LWIP_DNS==1: Turn on DNS module. UDP must be available for DNS
  * transport.
  */
-#define LWIP_DNS                        0
+#define LWIP_DNS                         1
 
 /*
    ---------------------------------
@@ -437,4 +437,6 @@
 extern unsigned char debug_flags;
 #define LWIP_DBG_TYPES_ON debug_flags
 
+#define TCP_SND_BUF 2048
+#define DNS_SERVER_ADDRESS(a) ip_addr_set_ip4_u32(a, ipaddr_addr("8.8.8.8")) /* google-public-dns-a.google.com */
 #endif /* LWIP_LWIPOPTS_H */
diff --git a/ports/unix/minimal/main.c b/ports/unix/minimal/main.c
index 9d80759..5df4a86 100644
--- a/ports/unix/minimal/main.c
+++ b/ports/unix/minimal/main.c
@@ -48,6 +48,7 @@
 #include "lwip/ip.h"
 #include "lwip/ip4_frag.h"
 #include "lwip/udp.h"
+#include "lwip/dns.h"
 #include "lwip/tcp.h"
 #include "netif/tapif.h"
 #include "netif/etharp.h"
@@ -110,6 +111,13 @@ usage(void)
   }
 }
 
+void dns_found(const char *name, ip_addr_t *addr, void *arg);
+void dns_found(const char *name, ip_addr_t *addr, void *arg)
+{
+  LWIP_UNUSED_ARG(arg);
+  printf("%s: %s\n", name, addr?ip_ntoa(addr):"<not found>");
+}
+
 int
 main(int argc, char **argv)
 {
@@ -212,6 +220,28 @@ main(int argc, char **argv)
 
   printf("Applications started.\n");
     
+#if LWIP_DNS
+  // for (int i = 0; i < 5000 * 1000; i++) { printf("."); }
+  dns_init();
+  puts("[*] dns_init done!");
+  char dnsname[] = "www.google.com";
+  ip_addr_t dnsresp;
+  err_t err = dns_gethostbyname(dnsname, &dnsresp, dns_found, 0);
+  if (err == ERR_ARG) {
+    puts("[!] dns_gethostbyname() returnded ERR_ARG. exit");
+    exit(1);
+  }
+  else if (err == ERR_OK) {
+    puts("[!] dns_gethostbyname() returnded ERR_OK");
+  }
+  else if (err == ERR_INPROGRESS) {
+    puts("[!] dns_gethostbyname() returnded ERR_INPROGRESS");
+  }
+  else {
+    printf("[!] dns_gethostbyname() returnded unhandled error (%d). exit\n", err);
+    exit(1);
+  }
+#endif /* LWIP_DNS */
 
   while (1) {
     /* poll netif, pass packet to lwIP */
