diff --git a/examples/httpsample/httpsample.cpp b/examples/httpsample/httpsample.cpp
index 0a51ba2..fef98a7 100644
--- a/examples/httpsample/httpsample.cpp
+++ b/examples/httpsample/httpsample.cpp
@@ -11,6 +11,7 @@
 //#include "rtos.h"
 //#include "JPEG_Converter.h"
 #include "EthernetInterface.h"
+#include "lwip/dns.h"
 #include "HTTPServer.h"
 #include "mbed_rpc.h"
 #include "RomRamFileSystem.h"
@@ -31,12 +32,12 @@
 Inline void
 svc_perror(const char *file, int_t line, const char *expr, ER ercd)
 {
-	if (ercd < 0) {
-		t_perror(LOG_ERROR, file, line, expr, ercd);
-	}
+    if (ercd < 0) {
+        t_perror(LOG_ERROR, file, line, expr, ercd);
+    }
 }
 
-#define	SVC_PERROR(expr)	svc_perror(__FILE__, __LINE__, #expr, (expr))
+#define SVC_PERROR(expr)    svc_perror(__FILE__, __LINE__, #expr, (expr))
 
 /**** User Selection *********/
 /** Network setting **/
@@ -396,23 +397,30 @@ static void SetI2CfromWeb(Arguments* arg, Reply* r) {
     }
 }
 
+void dns_found(const char *name, struct ip_addr *addr, void *arg);
+void dns_found(const char *name, struct ip_addr *addr, void *arg)
+{
+  LWIP_UNUSED_ARG(arg);
+  printf("%s: %s\r\n", name, addr?inet_ntoa(*(struct in_addr*)addr):"<not found>");
+}
+
 void
 http_main_task(intptr_t exinf) {
-	/* syslogの設定 */
-	SVC_PERROR(syslog_msk_log(LOG_UPTO(LOG_INFO), LOG_UPTO(LOG_EMERG)));	
+    /* syslogの設定 */
+    SVC_PERROR(syslog_msk_log(LOG_UPTO(LOG_INFO), LOG_UPTO(LOG_EMERG)));    
 
-	syslog(LOG_NOTICE, "Sample program starts (exinf = %d).", (int_t) exinf);
+    syslog(LOG_NOTICE, "Sample program starts (exinf = %d).", (int_t) exinf);
     printf("********* PROGRAM START ***********\r\n");
-	
+    
     /* Please enable this line when performing the setting from the
-	   Terminal side. */
+       Terminal side. */
 //    Thread thread(SetI2CfromTerm, NULL, osPriorityBelowNormal, DEFAULT_STACK_SIZE);
 
     mount_romramfs();   //RomRamFileSystem Mount
-	syslog(LOG_NOTICE, "LOG_NOTICE: RomRamFile System Mounted.");	
+    syslog(LOG_NOTICE, "LOG_NOTICE: RomRamFile System Mounted.");   
 
-	//    camera_start();     //Camera Start
-	
+    //    camera_start();     //Camera Start
+    
     RPC::add_rpc_class<RpcDigitalOut>();
     RPC::construct<RpcDigitalOut, PinName, const char*>(LED1, "led1");
     RPC::construct<RpcDigitalOut, PinName, const char*>(LED2, "led2");
@@ -421,52 +429,56 @@ http_main_task(intptr_t exinf) {
     RPCFunction rpcSetI2C(SetI2CfromWeb, "SetI2CfromWeb");
 
     printf("Network Setting up...\r\n");
-	syslog(LOG_NOTICE, "LOG_NOTICE: Network Setting up...");
-	
+    syslog(LOG_NOTICE, "LOG_NOTICE: Network Setting up...");
+    
 #if (USE_DHCP == 1)
     if (network.init() != 0) {                             //for DHCP Server
 #else
     if (network.init(IP_ADDRESS, SUBNET_MASK, DEFAULT_GATEWAY) != 0) { //for Static IP Address (IPAddress, NetMasks, Gateway)
 #endif
-		//        printf("Network Initialize Error \r\n");
-		syslog(LOG_NOTICE, "Network Initialize Error");
-		//        return -1;
-        return;		
+        //        printf("Network Initialize Error \r\n");
+        syslog(LOG_NOTICE, "Network Initialize Error");
+        //        return -1;
+        return;     
     }
-	syslog(LOG_NOTICE, "Network was initialized successfully");
-
-	//if (network.connect(5000) != 0) {
-	while (network.connect(5000) != 0) {
-		//		printf("Network Connect Error \r\n");
-		syslog(LOG_NOTICE, "LOG_NOTICE: Network Connect Error");
-		//        return -1;
-		//return;
+    syslog(LOG_NOTICE, "Network was initialized successfully");
+
+    //if (network.connect(5000) != 0) {
+    while (network.connect(5000) != 0) {
+        //      printf("Network Connect Error \r\n");
+        syslog(LOG_NOTICE, "LOG_NOTICE: Network Connect Error");
+        //        return -1;
+        //return;
     }
-			
-	//    syslog(LOG_NOTICE, "MAC Address is %s", network.getMACAddress());
-	//    syslog(LOG_NOTICE, "IP Address is %s", network.getIPAddress());
-	//    syslog(LOG_NOTICE, "NetMask is %s\r\n", network.getNetworkMask());
-	//    syslog(LOG_NOTICE, "Gateway Address is %s", network.getGateway());
-	
-	printf("MAC Address is %s\r\n", network.getMACAddress());
-	printf("IP Address is %s\r\n", network.getIPAddress());
-	printf("NetMask is %s\r\n", network.getNetworkMask());
-	printf("Gateway Address is %s\r\n", network.getGateway());
-	
-	//	syslog(LOG_INFO, "LOG_INFO: Network Setup OK");
-	printf("Network Setup OK\r\n");
-	
+            
+    syslog(LOG_NOTICE, "MAC Address is %s", network.getMACAddress());
+    syslog(LOG_NOTICE, "IP Address is %s", network.getIPAddress());
+    syslog(LOG_NOTICE, "NetMask is %s", network.getNetworkMask());
+    syslog(LOG_NOTICE, "Gateway Address is %s", network.getGateway());
+    
+    //  syslog(LOG_INFO, "LOG_INFO: Network Setup OK");
+    printf("Network Setup OK\r\n");
+        
+    #if LWIP_DNS
+      syslog(LOG_NOTICE, "****** looking up 'www.google.com'...");
+      char*          dnsname="www.google.com";
+      struct ip_addr dnsresp;
+      if (dns_gethostbyname(dnsname, &dnsresp, dns_found, 0) == ERR_OK) {
+        dns_found(dnsname, &dnsresp, 0);
+      }
+    #endif /* LWIP_DNS */
+    
     SnapshotHandler::attach_req(&snapshot_req);
-	HTTPServerAddHandler<SnapshotHandler>("/camera"); //Camera
-	FSHandler::mount("/romram", "/");
-	HTTPServerAddHandler<FSHandler>("/");
-	HTTPServerAddHandler<RPCHandler>("/rpc");
-	HTTPServerStart(80);	
+    HTTPServerAddHandler<SnapshotHandler>("/camera"); //Camera
+    FSHandler::mount("/romram", "/");
+    HTTPServerAddHandler<FSHandler>("/");
+    HTTPServerAddHandler<RPCHandler>("/rpc");
+    HTTPServerStart(80);    
 }
 
 // set mac address
 void mbed_mac_address(char *mac) {
-	// PEACH1
+    // PEACH1
     mac[0] = 0x00;
     mac[1] = 0x02;
     mac[2] = 0xF7;
@@ -484,10 +496,10 @@ void mbed_mac_address(char *mac) {
 bool_t led_state = true;
 void cyclic_handler(intptr_t exinf)
 {
-	if (led_state == true) {
-		led_state = false;
-	} else {
-		led_state = true;
-	}
-	set_led(BLUE_LED, led_state);
+    if (led_state == true) {
+        led_state = false;
+    } else {
+        led_state = true;
+    }
+    set_led(BLUE_LED, led_state);
 }
